多插件通信:

Eclipse通过选择服务(Selection Service)来解决这个问题(Eclipse的视图和视图之间彼此独立，用户不太可能随时遍历每一个视图，判断某一个视图的状态)

具体步骤如下。

　　(1)实现选择服务的提供者(ISelectionProvider)。

　　(2)获得Eclipse中的选择服务(ISelectionService)。

　　(3)实现选择服务的监听器(ISelectionListener)。

Eclipse平台为用户的选择和监听提供了一种服务的机制，当选择的某个节点为可提供服务的对象时，
工作台会把选择对象的动作作为事件通知监听器(可以是其他插件的其他视图)，监听器监听到感兴趣的事件后，将会执行相关的操作(例如属性视图显示节点信息)。

选择事件提供者(Selection Provider)

　　在Eclipse中，被选择的对象都要实现ISelectionProvider接口，通过此接口提供选择其中子节点的能力

JFace的Viewer中都实现了ISelectionProvider接口，也就是说，用户可以监听到Eclipse中JFace的Viewer组件的选择事件。

　　实现ISelectionProvider接口的对象可以提供选择监听的能力，但是用户选择的并非实现ISelectionProvider接口的对象，而是其中的节点，例如TreeViewer中的节点项。能够被选择的对象是实现了ISelection接口的对象，所有可选择的对象都实现了ISelection接口。

选择服务(Selection Service)

　　工作台提供了追踪相关Part中节点被选择的服务，通过选择服务，用户可以注册选择的监听器。工作台提供选择服务由ISelectionService对象提供。


对用户来说，用户关心的只是什么节点被选择，以及如何处理节点被选择的事件，至于如何通知及什么时机通知比较适当，用户可以不用关心。Eclipse已经封装了选择的服务层，用户可以通过工作台窗口获得ISelectionService对象，例如“getSite().getWorkbenchWindow(). getSelectionService()”。

选择事件监听器(Selection Listener)

　　要实现选择事件的监听，就要实现选择监听器。选择监听器是一个ISelectionListener类型的对象。ISelectionListener接口定义如例程3所示。

选择监听器是用户比较关注的部分，通过selectionChanged方法，用户能知道哪一个Part(IWorkbenchPart)中的哪一个对象(ISelection)被选用，从而进行相应的处理。如下代码片段为当选择的对象改变后，关联的Action也随之更新。